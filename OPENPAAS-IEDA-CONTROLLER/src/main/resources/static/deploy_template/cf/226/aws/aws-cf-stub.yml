---
name: (( merge ))
director_uuid: (( merge ))
releases: (( merge ))

networks:
- name: op_private
  type: manual
  subnets:
  - range: (( merge ))
    dns: (( merge ))
    gateway: (( merge ))    
    reserved: (( merge ))
    static: (( merge ))
    cloud_properties:
      subnet: (( merge ))
      security_groups: (( merge ))
      
- name: op_public
  type: vip
  cloud_properties: {}

compilation:
  cloud_properties:
    instance_type: m1.medium
  network: op_private
  reuse_compilation_vms: true
  workers: 6

jobs:
- name: consul
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(0) ))
  persistent_disk: 1024
  properties:
    consul:
      agent:
        mode: server
    metron_agent:
      zone: z1
      deployment: (( .name ))
  resource_pool: medium
  templates:
  - name: consul_agent
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update:
    max_in_flight: 1
    serial: true

- name: ha_proxy
  instances: 1
  networks:
  - name: op_private
    default: [dns, gateway]
    static_ips: (( static_ips(1) ))
  - name: op_public
    static_ips: (( merge ))
  properties:
    ha_proxy:
      ssl_pem: (( cf-certs.ha-proxy-ssl ))
    metron_agent:
      zone: z1
      deployment: (( .name ))
    networks:
      apps: op_private
    router:
      servers:
        z1: (( jobs.router.networks.op_private.static_ips ))
  resource_pool: router
  templates:
  - name: haproxy
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  - name: consul_agent
    release: (( .releases.[0].name ))
  update: {}
  
- name: nats
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(2) ))
  properties:
    metron_agent:
      zone: z1
      deployment: (( .name ))
    networks:
       apps: op_private
  resource_pool: medium
  templates:
  - name: nats
    release: (( .releases.[0].name ))
  - name: nats_stream_forwarder
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update: {}

- name: etcd
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(3) )) 
  persistent_disk: 10024
  properties:
    metron_agent:
      zone: z1
      deployment: (( .name )) 
    networks:
      apps: op_private
  resource_pool: medium
  templates:
  - name: etcd
    release: (( .releases.[0].name ))
  - name: etcd_metrics_server
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update:
    max_in_flight: 1

- name: stats
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(4) )) 
  properties:
    metron_agent:
      zone: z1
      deployment: (( .name )) 
    networks:
      apps: op_private
  resource_pool: small
  templates:
  - name: collector
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update: {}

- name: nfs
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(5) )) 
  persistent_disk: 102400
  properties:
    metron_agent:
      zone: z1
      deployment: (( .name ))
    networks:
      apps: op_private
  resource_pool: medium
  templates:
  - name: debian_nfs_server
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update: {}

- name: postgres 
  instances: 1  
  networks:
  - name: op_private
    static_ips: (( static_ips(6) )) 
  persistent_disk: 4096
  properties:
    metron_agent:
      zone: z1
      deployment: (( .name )) 
    networks:
      apps: op_private
  resource_pool: medium
  templates:
  - name: postgres
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update: {}

- name: uaa
  instances: 1  
  networks:
  - name: op_private
    static_ips: (( static_ips(7) )) 
  properties:
    consul:
      agent:
        services:
          uaa: {}
    metron_agent:
      zone: z1
      deployment: (( .name )) 
    networks:
      apps: op_private
    route_registrar:
      routes:
      - name: uaa
        port: 8080
        tags:
          component: uaa
        uris:
        - (( "uaa." .properties.domain ))
        - (( "*.uaa." .properties.domain ))
        - (( "login." .properties.domain ))
        - (( "*.login." .properties.domain ))
    uaa:
      proxy:
        servers: (( jobs.router.networks.op_private.static_ips ))
  resource_pool: medium
  templates:
  - name: uaa
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  - name: consul_agent
    release: (( .releases.[0].name ))
  - name: route_registrar
    release: (( .releases.[0].name ))
  - name: statsd-injector
    release: (( .releases.[0].name ))
  update: {}

- name: api
  instances: 1  
  networks:
  - name: op_private
    static_ips: (( static_ips(8) )) 
  persistent_disk: 8192
  properties:
    consul:
      agent:
        services:
          cloud_controller_ng: {}
          routing-api: {}
    metron_agent:
      zone: z1
      deployment: (( .name ))
    networks:
      apps: op_private
    nfs_server:
      address: (( jobs.nfs.networks.op_private.static_ips.[0] ))
      allow_from_entries:
      - (( .networks.op_private.subnets.[0].range ))
      share: null
    route_registrar:
      routes:
      - name: api
        port: 9022
        tags:
          component: CloudController
        uris:
        - (( "api." .properties.domain ))
  resource_pool: large
  templates:
  - name: cloud_controller_ng
    release: (( .releases.[0].name ))
  - name: cloud_controller_clock
    release: (( .releases.[0].name ))
  - name: cloud_controller_worker
  - name: routing-api
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  - name: statsd-injector
    release: (( .releases.[0].name ))
  - name: consul_agent
    release: (( .releases.[0].name ))
  - name: nfs_mounter
    release: (( .releases.[0].name ))
  - name: route_registrar
    release: (( .releases.[0].name ))
  update: {}

- name: clock_global
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(9) )) 
  persistent_disk: 4096
  properties:
    metron_agent:
      zone: z1
      deployment: (( .name )) 
    networks:
      apps: op_private
  resource_pool: medium
  templates:
  - name: cloud_controller_clock
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update: {}

- name: api_worker
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(10) )) 
  persistent_disk: 0
  properties:
    metron_agent:
      zone: z1
      deployment: (( .name ))
    networks:
      apps: op_private
    nfs_server:
      address: (( jobs.nfs.networks.op_private.static_ips.[0] ))
      allow_from_entries:
      - (( .networks.op_private.subnets.[0].range ))
      share: null
  resource_pool: small
  templates:
  - name: cloud_controller_worker
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  - name: consul_agent
    release: (( .releases.[0].name ))
  - name: nfs_mounter
    release: (( .releases.[0].name ))
  update: {}

- name: hm9000
  instances: 0
  networks:
  - name: op_private
  properties:
    metron_agent:
      zone: z1
      deployment: (( .name )) 
    networks:
      apps: op_private
    route_registrar:
      routes:
      - name: hm9000
        port: 5155
        tags:
          component: HM9K
        uris:
        - (( "hm9000." .properties.domain ))
  resource_pool: medium
  templates:
  - name: hm9000
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  - name: route_registrar
    release: (( .releases.[0].name ))
  update: {}

- name: runner
  instances: 0
  networks:
  - name: op_private
  properties:
    dea_next:
      zone: z1
    metron_agent:
      zone: z1
      deployment: (( .name ))
    networks:
      apps: op_private
  resource_pool: runner
  templates:
  - name: dea_next
    release: (( .releases.[0].name ))
  - name: dea_logging_agent
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update:
    max_in_flight: 1

- name: loggregator
  instances: 0
  networks:
  - name: op_private
  properties:
    doppler:
      zone: z1
    metron_agent:
      zone: z1
    doppler_endpoint:
      shared_secret: (( .properties.uaa.clients.login.secret ))
  resource_pool: medium
  templates:
  - name: doppler
    release: (( .releases.[0].name ))
  - name: syslog_drain_binder
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update: {}

- name: doppler
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(11) )) 
  properties:
    doppler:
      zone: z1
    metron_agent:
      zone: z1
      deployment: (( .name ))
    networks:
      apps: op_private
  resource_pool: medium
  templates:
  - name: doppler
    release: (( .releases.[0].name ))
  - name: syslog_drain_binder
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  update: {}

- name: loggregator_trafficcontroller
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(12) )) 
  properties:
    metron_agent:
      zone: z1
      deployment: (( .name ))
    networks:
      apps: op_private
    route_registrar:
      routes:
      - name: doppler
        port: 8081
        uris:
        - (( "doppler." .properties.domain ))
      - name: loggregator
        port: 8080
        uris:
        - (( "loggregator." .properties.domain ))
    traffic_controller:
      zone: z1
  resource_pool: small
  templates:
  - name: loggregator_trafficcontroller
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  - name: route_registrar
    release: (( .releases.[0].name ))
  update: {}

- name: router
  instances: 1
  networks:
  - name: op_private
    static_ips: (( static_ips(13) )) 
  properties:
    consul:
      agent:
        services:
          gorouter: {}
    metron_agent:
      zone: z1
      deployment: (( .name ))
    networks:
      apps: op_private
  resource_pool: router
  templates:
  - name: gorouter
    release: (( .releases.[0].name ))
  - name: metron_agent
    release: (( .releases.[0].name ))
  - name: consul_agent
    release: (( .releases.[0].name ))
  update: {}

properties:
  acceptance_tests: null
  app_domains: [(( domain ))]
  app_ssh: 
    host_key_fingerprint: (( diego-certs.ssh-key-fingerprint || merge || nil ))
    oauth_client_id: ssh-proxy
    
  cc:
    allow_app_ssh_access: true
    allowed_cors_domains: []
    app_events:
      cutoff_age_in_days: 31
    app_usage_events:
      cutoff_age_in_days: 31
    audit_events:
      cutoff_age_in_days: 31
    broker_client_default_async_poll_interval_seconds: null
    broker_client_max_async_poll_duration_minutes: null
    broker_client_timeout_seconds: 70
    buildpacks:
      buildpack_directory_key: (( domain "-cc-buildpacks" ))
      cdn: null
      fog_connection:
        local_root: /var/vcap/store
        provider: Local
    bulk_api_password: (( .properties.uaa.clients.login.secret ))
    client_max_body_size: 2048M
    db_encryption_key: db-encryption-key
    db_logging_level: debug2
    default_app_disk_in_mb: 1024
    default_app_memory: 1024
    default_buildpacks:
    - name: java_buildpack_offline
      package: buildpack_java_offline
    - name: egov_buildpack
      package: buildpack_egov
    - name: staticfile_buildpack
      package: buildpack_staticfile
    - name: java_buildpack
      package: buildpack_java
    - name: ruby_buildpack
      package: buildpack_ruby
    - name: nodejs_buildpack
      package: buildpack_nodejs
    - name: go_buildpack
      package: buildpack_go
    - name: python_buildpack
      package: buildpack_python
    - name: php_buildpack
      package: buildpack_php
    - name: binary_buildpack
      package: buildpack_binary
    default_health_check_timeout: 60
    default_quota_definition: default
    default_running_security_groups:
    - public_networks
    - dns
    - services
    default_staging_security_groups:
    - public_networks
    - dns
    default_to_diego_backend: true
    development_mode: false
    directories: null
    disable_custom_buildpacks: false
    droplets:
      cdn: null
      droplet_directory_key: (( domain "-cc-droplets" ))
      fog_connection:
        local_root: /var/vcap/store
        provider: Local
      max_staged_droplets_stored: null
    external_host: api
    external_port: 9022
    external_protocol: null
    install_buildpacks:
    - name: java_buildpack_offline
      package: buildpack_java_offline
    - name: egov_buildpack
      package: buildpack_egov
    - name: staticfile_buildpack
      package: buildpack_staticfile
    - name: java_buildpack
      package: buildpack_java
    - name: ruby_buildpack
      package: buildpack_ruby
    - name: nodejs_buildpack
      package: buildpack_nodejs
    - name: go_buildpack
      package: buildpack_go
    - name: python_buildpack
      package: buildpack_python
    - name: php_buildpack
      package: buildpack_php
    - name: binary_buildpack
      package: buildpack_binary
    internal_api_password: (( .properties.uaa.clients.login.secret ))
    internal_api_user: internal_user
    jobs:
      app_bits_packer:
        timeout_in_seconds: null
      app_events_cleanup:
        timeout_in_seconds: null
      app_usage_events_cleanup:
        timeout_in_seconds: null
      blobstore_delete:
        timeout_in_seconds: null
      blobstore_upload:
        timeout_in_seconds: null
      droplet_deletion:
        timeout_in_seconds: null
      droplet_upload:
        timeout_in_seconds: null
      generic:
        number_of_workers: null
      global:
        timeout_in_seconds: 14400
      model_deletion:
        timeout_in_seconds: null
    logging_level: debug2
    maximum_app_disk_in_mb: 2048
    maximum_health_check_timeout: 180
    min_cli_version: null
    min_recommended_cli_version: null
    newrelic:
      capture_params: false
      developer_mode: false
      environment_name: (( .name )) 
      license_key: null
      monitor_mode: false
      transaction_tracer:
        enabled: true
        record_sql: obfuscated
    packages:
      app_package_directory_key: (( domain "-cc-packages" ))
      cdn: null
      fog_connection:
        local_root: /var/vcap/store
        provider: Local
      max_package_size: 1073741824
      max_valid_packages_stored: null
    quota_definitions:
      default:
        memory_limit: 10240
        non_basic_services_allowed: true
        total_routes: 1000
        total_services: 100
    resource_pool:
      cdn: null
      fog_connection:
        local_root: /var/vcap/store
        provider: Local
      resource_directory_key: (( domain "-cc-resources" ))
    security_group_definitions:
    - name: public_networks
      rules:
      - destination: 0.0.0.0-9.255.255.255
        protocol: all
      - destination: 11.0.0.0-169.253.255.255
        protocol: all
      - destination: 169.255.0.0-172.15.255.255
        protocol: all
      - destination: 172.32.0.0-192.167.255.255
        protocol: all
      - destination: 192.169.0.0-255.255.255.255
        protocol: all
    - name: dns
      rules:
      - destination: 0.0.0.0/0
        ports: "53"
        protocol: tcp
      - destination: 0.0.0.0/0
        ports: "53"
        protocol: udp
    - name: services
      rules:
      - destination: (( .networks.op_private.subnets.[0].range ))
        protocol: all
    service_usage_events:
      cutoff_age_in_days: 31
    srv_api_uri: (( "https://api." domain ))
    stacks: null
    staging_upload_password: (( .properties.uaa.clients.login.secret ))
    staging_upload_user: staging_upload_user
    system_buildpacks:
    - name: java_buildpack_offline
      package: buildpack_java_offline
    - name: egov_buildpack
      package: buildpack_egov
    - name: staticfile_buildpack
      package: buildpack_staticfile
    - name: java_buildpack
      package: buildpack_java
    - name: ruby_buildpack
      package: buildpack_ruby
    - name: nodejs_buildpack
      package: buildpack_nodejs
    - name: go_buildpack
      package: buildpack_go
    - name: python_buildpack
      package: buildpack_python
    - name: php_buildpack
      package: buildpack_php
    - name: binary_buildpack
      package: buildpack_binary
    thresholds:
      api:
        alert_if_above_mb: null
        restart_if_above_mb: null
        restart_if_consistently_above_mb: null
      worker:
        alert_if_above_mb: null
        restart_if_above_mb: null
        restart_if_consistently_above_mb: null
    user_buildpacks: []
    users_can_select_backend: false
  ccdb:
    address: (( jobs.postgres.networks.op_private.static_ips.[0] ))
    databases:
    - citext: true
      name: ccdb
      tag: cc
    db_scheme: postgres
    port: 5524
    roles:
    - name: ccadmin
      password: (( .properties.uaa.clients.login.secret ))
      tag: admin
  collector: null
  consul:
    agent:
      log_level: null
      servers:
        lan: (( jobs.consul.networks.op_private.static_ips ))
    agent_cert: (( cf-certs.consul-agent-cert ))
    agent_key: (( cf-certs.consul-agent-key ))
    ca_cert: (( cf-certs.consul-ca-cert ))
    encrypt_keys: (( cf-certs.consul-encrypt-keys ))
    require_ssl: true
    server_cert: (( cf-certs.consul-server-cert ))
    server_key: (( cf-certs.consul-server-key ))
  databases:
    additional_config: null
    address: (( jobs.postgres.networks.op_private.static_ips.[0] )) 
    collect_statement_statistics: null
    databases:
    - citext: true
      name: ccdb
      tag: cc
    - citext: true
      name: uaadb
      tag: uaa
    db_scheme: postgres
    port: 5524
    roles:
    - name: ccadmin
      password: (( .properties.uaa.clients.login.secret ))
      tag: admin
    - name: uaaadmin
      password: (( .properties.uaa.clients.login.secret ))
      tag: admin
  dea_next:
    advertise_interval_in_seconds: 5
    allow_host_access: null
    allow_networks: []
    default_health_check_timeout: 60
    deny_networks: []
    directory_server_protocol: https
    disk_mb: 32768
    disk_overcommit_factor: 3
    evacuation_bail_out_time_in_seconds: 0
    heartbeat_interval_in_seconds: 10
    instance_bandwidth_limit: null
    instance_disk_inode_limit: 200000
    kernel_network_tuning_enabled: false
    logging_level: debug
    memory_mb: 8192
    memory_overcommit_factor: null
    mtu: null
    rlimit_core: 0
    staging_bandwidth_limit: null
    staging_disk_inode_limit: 200000
    staging_disk_limit_mb: 6144
    staging_memory_limit_mb: 1024
  description: (( merge ))
  disk_quota_enabled: false
  domain: (( merge )) 
  doppler:
    blacklisted_syslog_ranges: null
    debug: false
    enable_tls_transport: null
    maxRetainedLogMessages: 100
    port: 4443
    tls_server:
      cert: null
      key: null
      port: null
    unmarshaller_count: 5
  doppler_endpoint:
    shared_secret: (( .properties.uaa.clients.login.secret ))
  dropsonde:
    enabled: true
  etcd:
    machines: (( jobs.etcd.networks.op_private.static_ips ))
    peer_require_ssl: false
    require_ssl: false
  etcd_metrics_server:
    nats:
      machines: (( jobs.nats.networks.op_private.static_ips ))
      password: (( .properties.uaa.clients.login.secret ))
      username: nats
  hm9000:
    url: (( "https://hm9000." domain ))
  logger_endpoint:
    port: 443
    use_ssl: true
  loggregator:
    blacklisted_syslog_ranges: null
    debug: false
    etcd:
      machines: (( jobs.etcd.networks.op_private.static_ips ))
    maxRetainedLogMessages: 100
    outgoing_dropsonde_port: 8081
    tls:
      ca: null
  loggregator_endpoint:
    shared_secret: (( .properties.uaa.clients.login.secret ))
  login:
    analytics:
      code: null
      domain: null
    asset_base_url: null
    brand: oss
    catalina_opts: null
    enabled: true
    invitations_enabled: null
    links:
      passwd: (( "https://console." domain "/password_resets/new" ))
      signup: (( "https://console." domain "/register" ))
    logout: null
    messages: null
    notifications:
      url: null
    protocol: null
    restricted_ips_regex: null
    saml: null
    self_service_links_enabled: null
    signups_enabled: null
    smtp:
      host: null
      password: null
      port: null
      user: null
    spring_profiles: null
    tiles: null
    uaa_base: null
    url: null
  metron_agent:
    deployment: (( .name ))
    preferred_protocol: null
    tls_client:
      cert: null
      key: null
  metron_endpoint:
    shared_secret: (( .properties.uaa.clients.login.secret ))
  nats:
    address: (( jobs.nats.networks.op_private.static_ips.[0] ))
    debug: false
    machines: (( jobs.nats.networks.op_private.static_ips ))
    monitor_port: 4221
    password: (( .properties.uaa.clients.login.secret ))
    port: 4222
    prof_port: 0
    trace: false
    user: nats
  nfs_server:
    address: null
    allow_from_entries:
    - (( .networks.op_private.subnets.[0].range ))
    share: null
  request_timeout_in_seconds: 900
  router:
    cipher_suites: null
    debug_addr: null
    enable_ssl: null
    extra_headers_to_log: null
    logrotate: null
    port: null
    requested_route_registration_interval_in_seconds: null
    route_service_timeout: null
    route_services_secret: (( .properties.uaa.clients.login.secret ))
    route_services_secret_decrypt_only: null
    secure_cookies: null
    ssl_cert: null
    ssl_key: null
    ssl_skip_validation: true
    status:
      password: (( .properties.uaa.clients.login.secret ))
      port: null
      user: router
  smoke_tests: null
  ssl:
    skip_cert_verify: true
  support_address: http://support.cloudfoundry.com
  syslog_daemon_config: null
  system_domain: (( domain ))
  system_domain_organization: (( merge ))
  traffic_controller:
    outgoing_port: 8080
  uaa:
    admin:
      client_secret: (( .properties.uaa.clients.login.secret ))
    authentication:
      policy:
        countFailuresWithinSeconds: null
        lockoutAfterFailures: null
        lockoutPeriodSeconds: null
    batch:
      password: (( .properties.uaa.clients.login.secret ))
      username: batchuser
    catalina_opts: -Xmx768m -XX:MaxPermSize=256m
    cc:
      client_secret: (( .properties.uaa.clients.login.secret ))
    clients:
      cc-service-dashboards:
        authorities: clients.read,clients.write,clients.admin
        authorized-grant-types: client_credentials
        scope: openid,cloud_controller_service_permissions.read
        secret: (( .properties.uaa.clients.login.secret ))
      cc_routing:
        authorities: routing.router_groups.read
        authorized-grant-types: client_credentials
        secret: (( .properties.uaa.clients.login.secret ))
      cloud_controller_username_lookup:
        authorities: scim.userids
        authorized-grant-types: client_credentials
        secret: (( .properties.uaa.clients.login.secret ))
      doppler:
        authorities: uaa.resource
        override: true
        secret: (( .properties.uaa.clients.login.secret ))
      gorouter:
        authorities: clients.read,clients.write,clients.admin,routing.routes.write,routing.routes.read
        authorized-grant-types: client_credentials,refresh_token
        scope: openid,cloud_controller_service_permissions.read
        secret: (( .properties.uaa.clients.login.secret ))
      login:
        authorities: oauth.login,scim.write,clients.read,notifications.write,critical_notifications.write,emails.write,scim.userids,password.write
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        override: true
        redirect-uri: (( "https://login." domain ))
        scope: openid,oauth.approvals
        secret: (( merge || "admin" ))
      notifications:
        authorities: cloud_controller.admin,scim.read
        authorized-grant-types: client_credentials
        secret: (( .properties.uaa.clients.login.secret ))
      ssh-proxy:
        authorized-grant-types: authorization_code
        autoapprove: true
        override: true
        redirect-uri: /login
        scope: openid,cloud_controller.read,cloud_controller.write
        secret: (( .properties.uaa.clients.login.secret ))
    database: null
    issuer: (( "https://uaa." domain ))
    jwt:
      signing_key: (( cf-certs.jwt-signing-key ))
      verification_key: (( cf-certs.jwt-verification-key ))
    ldap: null
    login: null
    newrelic: null
    no_ssl: null
    port: 8080
    require_https: null
    restricted_ips_regex: 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}
    scim:
      external_groups: null
      groups: null
      userids_enabled: true
      users:
       - (( "admin|" .properties.uaa.clients.login.secret "|scim.write,scim.read,openid,cloud_controller.admin,clients.read,clients.write,doppler.firehose,routing.router_groups.read" ))
    spring_profiles: null
    url: (( "https://uaa." domain ))
    user: null
    zones: null
  uaadb:
    address: (( jobs.postgres.networks.op_private.static_ips.[0] ))
    databases:
    - citext: true
      name: uaadb
      tag: uaa
    db_scheme: postgresql
    port: 5524
    roles:
    - name: uaaadmin
      password: (( .properties.uaa.clients.login.secret ))
      tag: admin

resource_pools:
- name: small
  network: op_private
  env:
    bosh:
      password: (( merge || "c1oudc0w" ))
  stemcell:
    name: (( merge ))
    version: (( merge || "latest" ))
  cloud_properties:
    instance_type: m1.small

- name: medium
  network: op_private
  env:
    bosh:
      password: (( resource_pools.small.env.bosh.password ))
  stemcell:
    name: (( resource_pools.small.stemcell.name ))
    version: (( resource_pools.small.stemcell.version ))
  cloud_properties:
    instance_type: (( merge || "t2.medium" ))
    
- name: large
  network: op_private
  env:
    bosh:
      password: (( resource_pools.small.env.bosh.password ))
  stemcell:
    name: (( resource_pools.small.stemcell.name ))
    version: (( resource_pools.small.stemcell.version ))
  cloud_properties:
    instance_type: (( merge || "t2.large" ))

- name: runner
  network: op_private
  env:
    bosh:
      password: (( resource_pools.small.env.bosh.password ))
  stemcell:
    name: (( resource_pools.small.stemcell.name ))
    version: (( resource_pools.small.stemcell.version ))
  cloud_properties:
    instance_type: (( merge || "t2.large" ))
    
- name: router
  network: op_private
  env:
    bosh:
      password: (( resource_pools.small.env.bosh.password ))
  stemcell:
    name: (( resource_pools.small.stemcell.name ))
    version: (( resource_pools.small.stemcell.version ))
  cloud_properties:
    instance_type: (( merge || "t2.medium" ))

update:
  canaries: 1
  canary_watch_time: 30000-600000
  max_in_flight: 1
  serial: true
  update_watch_time: 5000-600000

cf-certs: ~
diego-certs: ~
