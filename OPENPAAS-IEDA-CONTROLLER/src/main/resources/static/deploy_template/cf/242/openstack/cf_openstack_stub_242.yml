# The following line helps maintain current documentation at http://docs.cloudfoundry.org.
# code_snippet cf-stub-vsphere start
---
director_uuid: (( meta.director-uuid ))

meta: ~
cf-certs: ~

resource_pool_overrides:
  small_instance_type: (( meta.small-instance-type || "m1.small" ))
  medium_instance_type: (( meta.medium-instance-type || "m1.medium" ))
  large_instance_type: (( meta.large-instance-type || "m1.large" ))
  runner_instance_type: (( meta.runner-instance-type || "m1.large" ))

base_security_group:
  rules:
  - destination: 10.244.0.0-10.254.0.0
    protocol: all

networks:
  - name: cf1
    type: manual
    subnets:
    - range: (( meta.network-0-range ))
      gateway: (( meta.network-0-gateway ))
      reserved: (( meta.network-0-reserved ))
      dns: (( meta.network-0-dns ))
      static: (( meta.network-0-static ))
      cloud_properties:
        net_id: (( meta.network-0-net-id ))
        security_groups: (( meta.network-0-security-groups ))
  - name: cf2
    type: manual
    subnets: (( merge || networks.cf1.subnets ))    # cf2 unused by default with the OpenStack template
                                                    # but the general upstream templates require this
                                                    # to be a semi-valid value, so just copy cf1

  - name: floating
    type: vip
    cloud_properties:
      net_id: (( meta.network-0-net-id ))
      security_groups: []
      
properties:
  domain: (( meta.system-domain ))
  system_domain: (( meta.system-domain ))
  system_domain_organization: (( meta.system-domain-organization ))
  app_domains:
  - (( meta.system-domain ))

  ssl:
    skip_cert_verify: (( meta.ssl-skip-cert-verify || true ))

  cc:
    staging_upload_user: (( meta.staging-upload-user || "upload-user" ))
    staging_upload_password: (( meta.staging-upload-password || "upload-password" ))
    bulk_api_password: (( meta.bulk-api-password || "bulk-password" ))
    db_encryption_key: (( meta.bulk-api-password || "db-encryption-key" ))
    uaa_skip_ssl_validation: true

  blobstore:
    admin_users:
      - username: (( meta.blobstore-username || "blobstore-username" ))
        password: (( meta.blobstore-password || "blobstore-password" ))
    secure_link:
      secret: (( meta.blobstore-secret || "blobstore-secret" ))
    tls:
      cert: (( cf-certs.blobstore-server-cert ))
      private_key: (( cf-certs.blobstore-server-key ))
      ca_cert: (( cf-certs.blobstore-ca-cert ))
  consul:
    encrypt_keys: (( cf-certs.consul-encrypt-keys ))
    ca_cert: (( cf-certs.consul-ca-cert ))
    server_cert: (( cf-certs.consul-server-cert ))
    server_key: (( cf-certs.consul-server-key ))
    agent_cert: (( cf-certs.consul-agent-cert ))
    agent_key: (( cf-certs.consul-agent-key ))
  dea_next:
    disk_mb: (( meta.dea-next-disk-mb || 2048 ))
    memory_mb: (( meta.dea-next-memory-mb || 1024 ))
  loggregator_endpoint:
    shared_secret: (( meta.loggregator-secret || "loggregator-secret" ))
  login:
    protocol: (( meta.login-protocol || "https" ))
  nats:
    user: (( meta.nats-user || "nats" ))
    password: (( meta.nats-password || "nats" ))
  router:
    status:
      user: (( meta.router-user || "router" ))
      password: (( meta.router-password || "router" ))
  uaa:
    admin:
      client_secret: (( meta.admin-secret || "admin-secret" ))
    cc:
      client_secret: (( meta.cc-secret || "cc-secret" ))
    clients:
      <<: (( merge || nil ))
      cc_routing:
        secret: (( meta.cc-routing-secret || "cc-routing-secret" ))
      cloud_controller_username_lookup:
        secret: (( meta.cloud-controller-username-lookup-secret || "cloud-controller-username-lookup-secret" ))
      doppler:
        secret: (( meta.doppler-secret || "doppler-secret" ))
      gorouter:
        secret: (( meta.gorouter-secret || "gorouter-secret" ))
      tcp_emitter:
        secret: (( meta.tcp-emitter-secret || "tcp-emitter-secret" ))
      tcp_router:
        secret: (( meta.tcp-router-secret || "tcp-router-secret" ))
      login:
        secret: (( meta.login-secret || "login-secret" ))
      notifications:
        secret: (( meta.notification-secret || "notification-secret" ))
    jwt:
      verification_key: (( cf-certs.jwt-verification-key ))
      signing_key: (( cf-certs.jwt-signing-key ))
    scim:
      users:
      - name: (( meta.admin-name || "admin" ))
        password: (( meta.admin-password ))
        email: (( meta.admin-email || nil ))
        groups:
        - scim.write
        - scim.read
        - openid
        - cloud_controller.admin
        - doppler.firehose
        - clients.read
        - clients.write
        - routing.router_groups.read
        - routing.router_groups.write

  ccdb:
    roles:
    - name: ccadmin
      password: (( meta.ccadmin-password || "admin" ))
  uaadb:
    roles:
    - name: uaaadmin
      password: (( meta.uaaadmin-password || "admin" ))
  databases:
    roles:
    - name: ccadmin
      password: (( meta.ccadmin-password || "admin" ))
    - name: uaaadmin
      password: (( meta.uaaadmin-password || "admin" ))
    - tag: admin
      name: diego
      password: (( meta.diego-password || "admin" ))
    databases:
    - tag: diego
      name: diego
      citext: false

  hm9000:
    server_key: (( cf-certs.hm9000-server-key || nil ))
    server_cert: (( cf-certs.hm9000-server-cert || nil ))
    client_key: (( cf-certs.hm9000-client-key || nil ))
    client_cert: (( cf-certs.hm9000-client-cert || nil ))
    ca_cert: (( cf-certs.hm9000-ca-cert || nil ))

jobs:
  - name: ha_proxy_z1
    instances: (( merge || 1 ))
    networks:
      - name: floating
        static_ips: (( meta.floating_static_ips ))
      - name: cf1
        static_ips: (( static_ips(0) ))
        default:
        - dns
        - gateway
    properties:
      ha_proxy:
        ssl_pem: (( cf-certs.ha-proxy-ssl ))

  - name: api_z1
    templates:
      - name: consul_agent
        release: (( meta.cf_release.name || "cf" ))
      - name: java-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: java-offline-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: go-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: binary-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: nodejs-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: ruby-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: php-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: python-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: staticfile-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: cloud_controller_ng
        release: (( meta.cf_release.name || "cf" ))
      - name: cloud_controller_clock
        release: (( meta.cf_release.name || "cf" ))
      - name: cloud_controller_worker
        release: (( meta.cf_release.name || "cf" ))
      - name: metron_agent
        release: (( meta.cf_release.name || "cf" ))
      - name: statsd-injector
        release: (( meta.cf_release.name || "cf" ))
      - name: route_registrar
        release: (( meta.cf_release.name || "cf" ))

  - name: api_worker_z1
    instances: 0
  - name: clock_global
    instances: 0

security_group_overrides:
  service_networks:
    rules: (( merge || base_security_group.rules ))
  load_balancer:
    rules:
    - destination: (( .jobs.ha_proxy_z1.networks.floating.static_ips.[0] ))
      protocol: all
